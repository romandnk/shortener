// Code generated by MockGen. DO NOT EDIT.
// Source: generate.go
//
// Generated by this command:
//
//	mockgen -source=generate.go -destination=mock/mock.go generate
//
// Package mock_generate is a generated GoMock package.
package mock_generate

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// Random mocks base method.
func (m *MockGenerator) Random() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Random")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Random indicates an expected call of Random.
func (mr *MockGeneratorMockRecorder) Random() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Random", reflect.TypeOf((*MockGenerator)(nil).Random))
}
